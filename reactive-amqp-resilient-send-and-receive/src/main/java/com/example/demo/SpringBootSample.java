/*
 * Copyright (c) 2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.demo;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Delivery;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.rabbitmq.*;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

@SpringBootApplication
public class SpringBootSample {

    public static void main(String[] args) {
        SpringApplication.run(SpringBootSample.class, args).close();
    }

    @Value("${messageCount:10}")
    int messageCount;

    @Bean
    CommandLineRunner integerSender(Sender sender) {
        return new IntegerSender(sender, messageCount);
    }
    @Bean
    CommandLineRunner integerReceiver(Receiver receiver, Sender sender) {
        return new IntegerReceiver(receiver, sender, messageCount);
    }

}

class IntegerSender implements CommandLineRunner {
    private final Sender sender;
    private int count;

    public IntegerSender(Sender sender, int count) {
        this.sender = sender;
        this.count = count;
    }
    public void run(String ... args) {
        declareResources()
                .then(send(integers(count)))
                .subscribe();
    }
    private Mono declareResources() {
        return sender
                .declareExchange(myexchange())
                .then(sender.declareQueue(myqueue()))
                .then(sender.bind(myexchangeWithMyQueue()));
    }
    private Mono send(Flux<Integer> integers) {
        return sender.send(integers.map(this::toAmqpMessage));
    }

    private Flux<Integer> integers(final int count) {
        return Flux.range(1, count);
    }
        private OutboundMessage toAmqpMessage(int index) {
        return new OutboundMessage(myexchange().getName(), myqueue().getName(), ("Message_" + index).getBytes());
    }


    private ExchangeSpecification myexchange() {
        return ExchangeSpecification.exchange("integers"); // default is direct
    }
    private QueueSpecification myqueue() {
        return QueueSpecification.queue("integers");
    }
    private QueueSpecification autoGeneratedQueue() {
        return QueueSpecification.queue();
    }
    private BindingSpecification myexchangeWithMyQueue() {
        return BindingSpecification.binding("integers", "integers", "integers");
    }

//    private Mono declareResourcesUsingAutoGeneratedQueue() {
//        return Mono.zip(
//                sender.declareExchange(myexchange()),
//                sender.declareQueue(QueueSpecification.queue()),
//                (e, q) -> bind(myexchange(), q));
//    }

}
class IntegerReceiver implements CommandLineRunner {
    private Receiver receiver;
    private Sender sender;
    private static final Logger LOGGER = LoggerFactory.getLogger(IntegerReceiver.class);
    private CountDownLatch allMessagesReceived;

    public IntegerReceiver(Receiver receiver, Sender sender, int count) {
        this.receiver = receiver;
        this.sender = sender;
        this.allMessagesReceived = new CountDownLatch(count);
    }

    public void run(String ... args ) throws InterruptedException {
        declareResources()
                .thenMany(receiveIntegers())
                .subscribe(m -> {
                    LOGGER.info("Received message {}", new String(m.getBody()));
                    allMessagesReceived.countDown();
                });
        waitForAllMessages();
    }
    private Flux<Delivery> receiveIntegers() {
        return receiver.consumeNoAck(queue().getName());
    }
    private Mono<AMQP.Queue.BindOk> declareResources() {
         return sender
                .declareExchange(exchange())
                .then(sender.declareQueue(queue()))
                .then(sender.bind(queueWithExchange()));
    }
    public void waitForAllMessages() throws InterruptedException {
        allMessagesReceived.await(10, TimeUnit.SECONDS);
    }
    private ExchangeSpecification exchange() {
        return ExchangeSpecification.exchange("integers"); // default is direct
    }
    private QueueSpecification queue() {
        return QueueSpecification.queue("integers");
    }
    private BindingSpecification queueWithExchange
            () {
        return BindingSpecification.binding("integers", "integers", "integers");
    }

}